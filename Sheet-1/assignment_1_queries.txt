------------------------------------Assignment 1--------------------------------------

-- -- delete record from student whose deptcode = 'CST'

DELETE FROM students 
WHERE deptcode = 'CST';


-- Find out the courses offered by the faculty dbp and nls.
SELECT crs_code
FROM
	faculty,
	crs_offrd
WHERE
	faculty.fac_code = crs_offrd.crs_fac_cd
	AND (
		faculty.fac_name = 'dbp'
		OR faculty.fac_name = 'nls');

-- Find out the courses with full details offered by dbp.
SELECT crs_offrd
FROM
	faculty,
	crs_offrd
WHERE
	faculty.fac_code = crs_offrd.crs_fac_cd
	AND faculty.fac_name = 'dbp';

-- Get the courses the credits of which lies between 4.0 and 6.0.
SELECT crs_code
FROM crs_offrd
WHERE crs_credits BETWEEN 4.0 AND 6.0;

--Get the courses the credits of which are > 6.5.
SELECT crs_code
FROM crs_offrd
WHERE crs_credits > 6.5;


------------------------------------Assignment 2--------------------------------------

-- Count the number of students in CSE dept.
SELECT count(*)
FROM students
WHERE deptcode = 'CST';

--Determine the minimum, maximum and average marks of each courses.
SELECT	
	crs_cd,
	crs_name,
	min(marks),
	avg(marks),
	max(marks)
FROM
	crs_regd,
	crs_offrd
WHERE crs_regd.crs_cd = crs_offrd.crs_code
GROUP BY (crs_cd, crs_name) -- crs_name here only because I wanted crs_name to be displayed, also we can say that pair (crs_cd, crs_name) will be unique
ORDER BY crs_cd;

--Determine the total credits of the courses registered by a student. (Assuming total credit gained by the student)
SELECT 
	crs_regd.crs_rollno as roll_no,
	sum(crs_offrd.crs_credits * crs_regd.marks/100) as total_credits
FROM crs_regd, crs_offrd
WHERE crs_regd.crs_cd = crs_offrd.crs_code
GROUP BY crs_regd.crs_rollno
ORDER BY crs_regd.crs_rollno;

--Count the number of students in each hostel whose department is CSE.
SELECT 
	hostel,
	count(*) as num_students
FROM students
WHERE deptcode = 'CST'
GROUP BY hostel;

-- Display the hostel,rollno,parent_inc of the student who has the max(parent_inc) in a hostel.
SELECT
	hostel,
	rollno,
	parent_inc
FROM students
WHERE parent_inc in (SELECT max(parent_inc) 
					FROM students 
					GROUP BY hostel)
ORDER BY hostel;

-- Display the name and parental income of each student greater than 
-- the parental income of some rollno 92005010.
SELECT
	name,
	parent_inc
FROM students
WHERE parent_inc > (SELECT parent_inc 
					FROM students 
					WHERE rollno = 92005010);

-- Find out marks of students who have marks more than
-- rollno 92005102 for course CH103 and PH106.

SELECT 
	crs_rollno,
	crs_cd, 
	marks
FROM crs_regd
WHERE(
	(
		crs_cd = 'CH103'
		AND 
		marks > (
					SELECT marks
					FROM crs_regd
					WHERE crs_rollno = 92005102 AND crs_cd = 'CH103'
				)
	)
	OR 
	(
		crs_cd = 'PH106'
		AND 
		marks > (
					SELECT marks
					FROM crs_regd
					WHERE crs_rollno = 92005102 AND crs_cd = 'PH106'
				)
	)
);



------------------------------------Assignment 3--------------------------------------

--List students (rollno,name,deptcode) registered for course EE101.
SELECT	rollno,name,deptcode
FROM	students, crs_regd
WHERE
	crs_rollno = rollno
	AND crs_cd = 'EE101';

-- List students (rollno,name) in ELE dept registered for course EE101.
SELECT 	rollno,name
FROM	students, crs_regd
WHERE
	crs_rollno = rollno
	AND deptcode = 'ELE'
	AND crs_cd = 'EE101';

-- List students (rollno,name) in ELE dept not registered for course EE101.
-- Idea: (Students in ELE) - (Students in ELE registered for EE101) [ minus operator -> EXCEPT ]
SELECT	rollno,name
FROM	students, crs_regd
WHERE
	crs_rollno = rollno
	AND deptcode = 'ELE'
EXCEPT -- (- operator) [first part and second part converted to set before set minus, and output is a set also]
SELECT	rollno,name
FROM	students, crs_regd
WHERE
	crs_rollno = rollno
	AND deptcode = 'ELE'
	AND crs_cd = 'EE101';

-- List the names of the students who have registered for both the courses 'DBMS' and 'OS'.
-- Idea: set intersection between DBMS and OS 
SELECT	name
FROM	students, crs_regd, crs_offrd
WHERE
	crs_rollno = rollno
	AND crs_cd = crs_code
	AND crs_offrd.crs_name = 'DBMS'
INTERSECT --intersection
SELECT	name
FROM	students, crs_regd, crs_offrd
WHERE
	crs_rollno = rollno
	AND crs_cd = crs_code
	AND crs_offrd.crs_name = 'OS';

-- Find the names of the faculty members who have offered either 'MIS' or 'Software Engg.'
-- Idea: Union of faculty who offer MIS and faculty who offer Software
SELECT fac_name
FROM faculty, crs_offrd
WHERE 
	crs_fac_cd = fac_code 
	AND crs_name = 'MIS'
UNION
SELECT fac_name
FROM faculty, crs_offrd
WHERE
	crs_fac_cd = fac_code
	AND crs_name = 'Software Engg.';

-- Find the names of the faculty members who have offered 'MIS' but not offered 'Software Engg.'
-- Idea: Set difference MIS - Software
SELECT fac_name FROM faculty, crs_offrd 
WHERE 
	fac_code = crs_fac_cd 
	AND crs_name = 'MIS' 
EXCEPT 
SELECT fac_name 
FROM faculty, crs_offrd 
WHERE 
	fac_code = crs_fac_cd 
	AND crs_name = 'Software Engg.';

-- Find out the students in each hostel who are not registered for any course.
-- Idea : join the crs_regd and student, the person with no data on of crs_rollno will be null
SELECT rollno, name, hostel
FROM students
LEFT JOIN crs_regd ON (rollno = crs_rollno) 
WHERE crs_rollno IS NULL ORDER BY hostel;

//another alternative
(SELECT rollno, name, hostel
 FROM students
 WHERE rollno NOT IN (SELECT crs_rollno FROM crs_regd))
UNION
(SELECT rollno, name, hostel
 FROM students
 WHERE rollno IN (SELECT crs_rollno FROM crs_regd)
       AND rollno NOT IN (SELECT rollno FROM students WHERE rollno IN (SELECT crs_rollno FROM crs_regd)))
ORDER BY hostel;


-- NOTE: default where condition will not work here
-- Note: The LEFT JOIN keyword returns all records from the left table, even if there are no matches in the right table. Very Important for this question


--Idea2: student.rollno - crs_regd.crs_rollno will give us a set of roll_no who has no subject
SELECT rollno, name, hostel 
FROM students
WHERE rollno in (	SELECT rollno FROM students
					EXCEPT
					SELECT DISTINCT crs_rollno FROM crs_regd);



-- Select the students who are in ELE dept or who have registered for course CS101.
-- Idea: Union
SELECT rollno,name,deptcode
FROM students 
WHERE deptcode = 'ELE' 
UNION 
SELECT rollno,name,deptcode 
FROM students,crs_regd 
WHERE 
	rollno = crs_rollno 
	AND crs_cd = 'CS101';

-- Display the students who have registered to all the courses.
-- Idea: group by crs_rollno, count(*) will give number of courses enrolled by that student
SELECT crs_rollno, name, deptcode 
FROM students, crs_regd
WHERE rollno = crs_rollno
GROUP BY crs_rollno, rollno 
HAVING COUNT(*) = (SELECT COUNT(*) FROM crs_offrd);

-- Give Grace Marks 5 in subject ‘DBMS’to the students who have scored less than 50 in that subject.
-- Idea: Update Table
UPDATE crs_regd 
SET marks = marks + 5 
WHERE crs_cd = 'CS207' AND marks < 50;
